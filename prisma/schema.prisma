// # // to push to db   npx prisma db push && npx prisma generate
// # // to open studio npx prisma studio
// clear cache = rm -rf .next

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String  @id @default(uuid())
  clerkId      String  @unique
  firstName    String
  lastName     String
  username     String  @unique
  email        String
  profileImage String
  bio          String?

  // Simple continue tracking
  lastWorkflowId String? // Just store the workflow ID
  lastViewedAt   DateTime? // When they last viewed it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (existing only)
  Workflow            Workflow[]            @relation("AuthoredWorkflows")
  WorkflowDownloads   WorkflowDownload[]
  completions         WorkflowCompletion[]
  reportedIssues      Issue[]               @relation("reportedIssues")
  UserSiteCredentials UserSiteCredentials[]
}

model Workflow {
  id                String       @id @default(uuid())
  title             String
  workflowImage     String
  creationImage     String?
  videoUrl          String?
  slug              String       @unique
  authorId          String
  author            Profile      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade, name: "AuthoredWorkflows")
  viewCount         Int          @default(0)
  workFlowJson      Json         @default("{}")
  verifiedAndTested Boolean      @default(true)
  
  // Frontend tracking fields
  needsFrontend     Boolean      @default(true)  // Whether this workflow needs a frontend
  frontendCompleted Boolean      @default(false) // Whether frontend has been built
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations (existing + new steps)
  downloads             WorkflowDownload[]
  completions           WorkflowCompletion[]
  workflowSteps         WorkflowStep[] // NEW: Simple steps
  WorkflowTeachingGuide WorkflowTeachingGuide?
  availableSites        AvailableSite[] // Reverse relation
}

model WorkflowStep {
  id              String  @id @default(uuid())
  workflowId      String
  stepNumber      Int
  stepTitle       String
  stepDescription String?
  stepImage       String?
  helpText        String? // "This step requires an OpenAI API key"
  helpLinks       Json? // [{"name": "OpenAI Documentation", "url": "https://..."}, {"name": "Get API Key Tutorial", "url": "/tutorials/..."}]

  // NEW: Rich n8n node data
  nodeId      String // Original n8n node ID
  nodeType    String // e.g., "n8n-nodes-base.googleDrive"
  position    Json // [x, y] coordinates
  parameters  Json // All node parameters
  credentials Json? // Node credentials if any
  typeVersion Int     @default(1)
  webhookId   String?

  // Node classification
  isTrigger    Boolean @default(false)
  isMergeNode  Boolean @default(false)
  isDependency Boolean @default(false)

  // --- NEW: Teaching content for each step ---
  teachingSummary     String? // Brief action summary: "Upload image to Google Drive"
  teachingExplanation String? // LLM-generated friendly explanation
  teachingTips        Json? // ["tip1", "tip2"] - Learning tips
  teachingKeyPoints   Json? // ["point1", "point2"] - Key concepts


  isCustomStep Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepNumber])
  @@index([workflowId, stepNumber])
}

model WorkflowDownload {
  id           String   @id @default(uuid())
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId       String
  user         Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  downloadedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Optional: prevent duplicate download records
}

model WorkflowCompletion {
  id          String   @id @default(uuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId      String
  user        Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Prevent duplicate completions - one completion per user per workflow
}

model Issue {
  id          String      @id @default(uuid())
  name        String
  email       String?
  phone       String?
  workflowUrl String?
  content     String      @db.Text
  status      IssueStatus @default(OPEN)
  priority    Priority    @default(MEDIUM) // ‚Üê Add this line
  userId      String?
  user        Profile?    @relation(fields: [userId], references: [clerkId], onDelete: SetNull, name: "reportedIssues")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([priority]) // ‚Üê Add this index
  @@index([createdAt])
}

model NodeUsageStats {
  id String @id @default(uuid())

  // --- Service identification (simplified) ---
  // These fields identify which service/API this usage stat tracks
  serviceName    String // Clean service name: "hedra", "google-drive", "openai"
  hostIdentifier String? // API hostname for HTTP requests: "api.hedra.com", null for direct nodes
  nodeType       String // Original n8n node type for reference: "n8n-nodes-base.httpRequest"

  // --- Usage tracking ---
  // Track how popular each service is across all workflows
  usageCount Int      @default(1) // How many times this service appears in workflows
  lastUsedAt DateTime @default(now()) // When this service was last seen in a workflow upload

  // --- Documentation linking ---
  // Connect usage stats to their setup guides
  nodeDocumentationId String? // Foreign key to NodeDocumentation
  nodeDocumentation   NodeDocumentation? @relation(fields: [nodeDocumentationId], references: [id])

  // --- Guide management ---
  // Track which services need documentation created
  needsGuide Boolean @default(true) // true = needs guide, false = has guide (flipped when guide created)

  // --- Standard fields ---
  createdAt DateTime @default(now()) // When this service was first discovered
  updatedAt DateTime @updatedAt // When usage count was last incremented

  // --- Constraints ---
  // One usage stat record per unique service (serviceName + hostIdentifier combination)
  // Use a different approach for unique constraint with nullable field
  @@unique([serviceName, hostIdentifier])
  @@index([serviceName])
  @@index([needsGuide])
}

model NodeDocumentation {
  id String @id @default(uuid())

  // --- Service identification (matches NodeUsageStats) ---
  // IMPORTANT: These fields must exactly match NodeUsageStats for proper linking
  serviceName    String // Must match NodeUsageStats.serviceName: "hedra", "google-drive"
  hostIdentifier String? // Must match NodeUsageStats.hostIdentifier: "api.hedra.com" or null

  // --- Content creation (manual) ---
  // The actual helpful content you create for students
  title       String // Guide title: "Hedra API Setup Guide"
  description String? // What this service does: "AI video generation platform"

  // --- Credentials section ---
  credentialGuide  String? // Complete step-by-step credential setup instructions
  credentialVideo  String? // Single video URL for credential setup walkthrough
  credentialsLinks Json? // Links specific to getting credentials: [{"title": "Get API Key", "url": "https://..."}]

  // --- General setup (after credentials) ---
  setupInstructions String? // Step-by-step setup text (markdown supported)

  // --- General resources ---
  helpLinks       Json? // General helpful links: [{"title": "Documentation", "url": "https://..."}]
  videoLinks      Json? // Other tutorial videos: [{"title": "Advanced Usage", "url": "youtube-url"}]
  troubleshooting Json? // Common issues: [{"title": "401 Error", "solution": "Check your API key"}]

  // --- Standard fields ---
  createdAt DateTime @default(now()) // When guide was created
  updatedAt DateTime @updatedAt // When guide content was last modified

  // --- Relations ---
  // Back-reference to all usage stats using this guide
  usageStats NodeUsageStats[] // All NodeUsageStats records that link to this guide

  // --- Node Image ---
  nodeImage String? // Optional image for the node

  // --- Constraints ---
  // One guide per unique service (must match NodeUsageStats constraint)
  @@unique([serviceName, hostIdentifier])
}

// WorkflowTeachingGuide - Reduced to essential billing fields only
model WorkflowTeachingGuide {
  id String @id @default(uuid())
  
  // --- Workflow linking ---
  workflowId String // Foreign key to Workflow.id

  // --- THE ONLY 5 FIELDS STUDENTS NEED TO START BILLING üí∞ ---
  title                String // "üí∞ Get Paid $1,200 for This 2-Hour Build"
  whatYoullBuild       String // Technical outcome: "**Automated** invoice system using **Stripe** + **Gmail**"
  whatYoullBuildSummary String? // 2-line summary for cards: "Build automated invoice system that charges clients instantly and sends receipts via Gmail"
  possibleMonetization String // "Charge local restaurants $397 setup + $97/month maintenance"
  toolsUsed            String[] // ["Stripe - Payment processing", "Gmail - Email automation"]

  // --- Standard fields ---
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // --- Constraints ---
  @@unique([workflowId])
}

model UserSiteCredentials {
  id     String  @id @default(uuid())
  userId String // Reference to Profile.clerkId
  user   Profile @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  // Site identification - PROPER FK RELATIONSHIP
  availableSiteId String // FK to AvailableSite.id
  availableSite   AvailableSite @relation(fields: [availableSiteId], references: [id], onDelete: Cascade)

  // Flexible credentials storage
  credentials Json // All webhooks, API keys, settings for this site type

  // Status tracking
  isActive     Boolean @default(true)
  isConfigured Boolean @default(false) // true when all required fields filled

  // Usage tracking
  lastUsed   DateTime?
  usageCount Int       @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, availableSiteId]) // One config per user per site
  @@index([userId])
  @@index([availableSiteId])
  @@index([isActive, isConfigured])
}

model AvailableSite {
  id String @id @default(uuid())

  workflowId String? // FK to Workflow.id (optional)
  workflow   Workflow? @relation(fields: [workflowId], references: [id])

  frontendWorkflowJson Json? // Modified version with webhooks/credentials

  // Site identification
  siteName String @unique // "chatbot", "video-generator" - matches folder name
  siteUrl  String // "/dashboard/portfolio/chatbot"

  // Display information
  name         String // "AI Chatbot", "Video Generator Pro"
  description  String // "Intelligent customer support automation"
  previewImage String // URL to preview image/screenshot

  // Site metadata
  difficulty    String? // "Beginner", "Intermediate", "Advanced"
  estimatedTime String? // "2 hours", "1 day"
  category      String? // "AI", "Marketing", "E-commerce"

  // Required setup
  requiredCredentials Json // ["webhook", "openai_api_key", "stripe_key"]
  setupInstructions   String? // Brief setup guide

  // Status and ordering
  status    SiteStatus @default(ACTIVE)


  // Analytics
  viewCount     Int @default(0)
  completeCount Int @default(0) // How many users have configured this

  // REVERSE RELATION - One site can have many user credentials
  userCredentials UserSiteCredentials[]

  // Admin tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([category])
  @@index([siteName]) // Keep this for API route lookups
}

enum SiteStatus {
  ACTIVE
  BETA
  COMING_SOON
  DISABLED
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

