// # // to push to db   npx prisma db push && npx prisma generate
// # // to open studio npx prisma studio
// clear cache = rm -rf .next

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String  @id @default(uuid())
  clerkId      String  @unique
  firstName    String
  lastName     String
  username     String  @unique
  email        String
  profileImage String
  bio          String?

  // Simple continue tracking
  lastWorkflowId String? // Just store the workflow ID
  lastViewedAt   DateTime? // When they last viewed it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (existing only)
  Workflow          Workflow[]           @relation("AuthoredWorkflows")
  WorkflowDownloads WorkflowDownload[]
  completions       WorkflowCompletion[]
  reportedIssues    Issue[]              @relation("reportedIssues")
}

model Workflow {
  id                String       @id @default(uuid())
  title             String
  content           String       @db.Text
  workflowImage     String
  creationImage     String?
  videoUrl          String?
  slug              String       @unique
  authorId          String
  author            Profile      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade, name: "AuthoredWorkflows")
  category          CategoryType
  viewCount         Int          @default(0)
  workFlowJson      Json         @default("{}")
  verifiedAndTested Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations (existing + new steps)
  downloads             WorkflowDownload[]
  completions           WorkflowCompletion[]
  workflowSteps         WorkflowStep[] // NEW: Simple steps
  WorkflowTeachingGuide WorkflowTeachingGuide?
}

model WorkflowStep {
  id              String  @id @default(uuid())
  workflowId      String
  stepNumber      Int
  stepTitle       String
  stepDescription String?
  stepImage       String?
  helpText        String? // "This step requires an OpenAI API key"
  helpLinks       Json? // [{"name": "OpenAI Documentation", "url": "https://..."}, {"name": "Get API Key Tutorial", "url": "/tutorials/..."}]

  // NEW: Rich n8n node data
  nodeId      String // Original n8n node ID
  nodeType    String // e.g., "n8n-nodes-base.googleDrive"
  position    Json // [x, y] coordinates
  parameters  Json // All node parameters
  credentials Json? // Node credentials if any
  typeVersion Int     @default(1)
  webhookId   String?

  // Node classification
  isTrigger    Boolean @default(false)
  isMergeNode  Boolean @default(false)
  isDependency Boolean @default(false)

  // --- NEW: Teaching content for each step ---
  teachingSummary     String? // Brief action summary: "Upload image to Google Drive"
  teachingExplanation String? // LLM-generated friendly explanation
  teachingTips        Json? // ["tip1", "tip2"] - Learning tips
  teachingKeyPoints   Json? // ["point1", "point2"] - Key concepts

  // --- NEW: Step audio ---
  // stepAudioUrl       String? // URL to this step's audio explanation
  // stepAudioGenerated Boolean @default(false) // Track if step audio was created
  // stepAudioScript    String? // Text that was narrated for this step

  isCustomStep Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepNumber])
  @@index([workflowId, stepNumber])
}

model WorkflowDownload {
  id           String   @id @default(uuid())
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId       String
  user         Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  downloadedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Optional: prevent duplicate download records
}

model WorkflowCompletion {
  id          String   @id @default(uuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId      String
  user        Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Prevent duplicate completions - one completion per user per workflow
}

model Issue {
  id          String      @id @default(uuid())
  name        String
  email       String?
  phone       String?
  workflowUrl String?
  content     String      @db.Text
  status      IssueStatus @default(OPEN)
  priority    Priority    @default(MEDIUM) // ‚Üê Add this line
  userId      String?
  user        Profile?    @relation(fields: [userId], references: [clerkId], onDelete: SetNull, name: "reportedIssues")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([priority]) // ‚Üê Add this index
  @@index([createdAt])
}

model NodeUsageStats {
  id String @id @default(uuid())

  // --- Service identification (simplified) ---
  // These fields identify which service/API this usage stat tracks
  serviceName    String // Clean service name: "hedra", "google-drive", "openai"
  hostIdentifier String? // API hostname for HTTP requests: "api.hedra.com", null for direct nodes
  nodeType       String // Original n8n node type for reference: "n8n-nodes-base.httpRequest"

  // --- Usage tracking ---
  // Track how popular each service is across all workflows
  usageCount Int      @default(1) // How many times this service appears in workflows
  lastUsedAt DateTime @default(now()) // When this service was last seen in a workflow upload

  // --- Documentation linking ---
  // Connect usage stats to their setup guides
  nodeDocumentationId String? // Foreign key to NodeDocumentation
  nodeDocumentation   NodeDocumentation? @relation(fields: [nodeDocumentationId], references: [id])

  // --- Guide management ---
  // Track which services need documentation created
  needsGuide Boolean @default(true) // true = needs guide, false = has guide (flipped when guide created)

  // --- Standard fields ---
  createdAt DateTime @default(now()) // When this service was first discovered
  updatedAt DateTime @updatedAt // When usage count was last incremented

  // --- Constraints ---
  // One usage stat record per unique service (serviceName + hostIdentifier combination)
  // Use a different approach for unique constraint with nullable field
  @@unique([serviceName, hostIdentifier])
  @@index([serviceName])
  @@index([needsGuide])
}

model NodeDocumentation {
  id String @id @default(uuid())

  // --- Service identification (matches NodeUsageStats) ---
  // IMPORTANT: These fields must exactly match NodeUsageStats for proper linking
  serviceName    String // Must match NodeUsageStats.serviceName: "hedra", "google-drive"
  hostIdentifier String? // Must match NodeUsageStats.hostIdentifier: "api.hedra.com" or null

  // --- Content creation (manual) ---
  // The actual helpful content you create for students
  title       String // Guide title: "Hedra API Setup Guide"
  description String? // What this service does: "AI video generation platform"

  // --- Credentials section ---
  credentialGuide  String? // Complete step-by-step credential setup instructions
  credentialVideo  String? // Single video URL for credential setup walkthrough
  credentialsLinks Json? // Links specific to getting credentials: [{"title": "Get API Key", "url": "https://..."}]

  // --- General setup (after credentials) ---
  setupInstructions String? // Step-by-step setup text (markdown supported)

  // --- General resources ---
  helpLinks       Json? // General helpful links: [{"title": "Documentation", "url": "https://..."}]
  videoLinks      Json? // Other tutorial videos: [{"title": "Advanced Usage", "url": "youtube-url"}]
  troubleshooting Json? // Common issues: [{"title": "401 Error", "solution": "Check your API key"}]

  // --- Standard fields ---
  createdAt DateTime @default(now()) // When guide was created
  updatedAt DateTime @updatedAt // When guide content was last modified

  // --- Relations ---
  // Back-reference to all usage stats using this guide
  usageStats NodeUsageStats[] // All NodeUsageStats records that link to this guide

  // --- Node Image ---
  nodeImage String? // Optional image for the node

  // --- Constraints ---
  // One guide per unique service (must match NodeUsageStats constraint)
  @@unique([serviceName, hostIdentifier])
}

// WorkflowTeachingGuide - Project-level content only
model WorkflowTeachingGuide {
  id String @id @default(uuid())

  // --- Workflow linking ---
  workflowId String // Foreign key to Workflow.id

  // --- Essential teaching content (ALL REQUIRED) ---
  title                String // Required: "üí∞ Get Paid in Days, Not Weeks"
  description          String // Required: Brief business-focused description 
  projectIntro         String // Required: Paul Graham style pain-first introduction
  idealFor             String // Required: "üéØ Freelancers & Consultants..."
  timeToValue          String // Required: "‚ö° **1 hour** to build vs..."
  howItWorks           String // Required: "‚úÖ Automatically generates invoices..."
  realCostOfNotHaving  String // Required: Paul Graham style hidden costs
  whatYoullBuild       String // Required: Technical outcomes with **bold tools**
  possibleMonetization String // Required: Business opportunity description
  toolsUsed            String[] // Required: Array of tool descriptions
  requiredApiServices  Json? // ["OpenAI", "ElevenLabs", "Hedra", "Google Drive"]
  // --- Standard fields ---
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // --- Relations ---
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // --- Constraints ---
  @@unique([workflowId])
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Predefined categories
enum CategoryType {
  ai
  secops
  sales
  it_ops
  marketing
  engineering
  devops
  building_blocks
  design
  finance
  hr
  other
  product
  support
}
