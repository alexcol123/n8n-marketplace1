

// # // to push to db   npx prisma db push && npx prisma generate
// # // to open studio npx prisma studio

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String  @id @default(uuid())
  clerkId      String  @unique
  firstName    String
  lastName     String
  username     String  @unique
  email        String
  profileImage String
  bio          String?

  // Simple continue tracking
  lastWorkflowId String? // Just store the workflow ID
  lastViewedAt   DateTime? // When they last viewed it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (existing only)
  Workflow          Workflow[]           @relation("AuthoredWorkflows")
  WorkflowDownloads WorkflowDownload[]
  completions       WorkflowCompletion[]
  reportedIssues    Issue[]              @relation("reportedIssues")
}

model Workflow {
  id                String       @id @default(uuid())
  title             String
  content           String       @db.Text
  workflowImage     String
  videoUrl          String?
  slug              String       @unique
  authorId          String
  author            Profile      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade, name: "AuthoredWorkflows")
  category          CategoryType
  viewCount         Int          @default(0)
  workFlowJson      Json         @default("{}")
  steps             Json?
  verifiedAndTested Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations (existing + new steps)
  downloads     WorkflowDownload[]
  completions   WorkflowCompletion[]
  workflowSteps WorkflowStep[] // NEW: Simple steps
}

model WorkflowStep {
  id              String  @id @default(uuid())
  workflowId      String
  stepNumber      Int
  stepTitle       String
  stepDescription String?
  stepImage       String?
  helpText        String? // "This step requires an OpenAI API key"
  helpLinks       Json? // [{"name": "OpenAI Documentation", "url": "https://..."}, {"name": "Get API Key Tutorial", "url": "/tutorials/..."}]

  isCustomStep Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepNumber])
  @@index([workflowId, stepNumber])
}

model WorkflowDownload {
  id           String   @id @default(uuid())
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId       String
  user         Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  downloadedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Optional: prevent duplicate download records
}

model WorkflowCompletion {
  id          String   @id @default(uuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId      String
  user        Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Prevent duplicate completions - one completion per user per workflow
}

model Issue {
  id          String      @id @default(uuid())
  name        String
  email       String?
  phone       String?
  workflowUrl String?
  content     String      @db.Text
  status      IssueStatus @default(OPEN)
  priority    Priority    @default(MEDIUM) // ← Add this line
  userId      String?
  user        Profile?    @relation(fields: [userId], references: [clerkId], onDelete: SetNull, name: "reportedIssues")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([priority]) // ← Add this index
  @@index([createdAt])
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Predefined categories
enum CategoryType {
  ai
  secops
  sales
  it_ops
  marketing
  engineering
  devops
  building_blocks
  design
  finance
  hr
  other
  product
  support
}
